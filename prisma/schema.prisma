generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AppUser {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @map("user_id")
  webUserId   String   @map("web_user_id")
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  displayName String?  @map("display_name")
  email       String   @unique
  number      String?
  gender      String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  password String?

  deletedCalls DeletedCall[]
  messages     Message[]
  folders      Folder[]
  settings     Settings[]

  @@map("app_user")
}

model DeletedCall {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id")
  deletedAt DateTime @default(now()) @map("deleted_at")
  number    String

  appUser AppUser? @relation(fields: [userId], references: [userId])

  @@map("deleted_calls")
}

model Folder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  timesUsed Int      @map("times_used")
  position  Int
  userId    String   @map("user_id")
  isActive  Boolean  @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  appUser         AppUser?          @relation(fields: [userId], references: [userId])
  messageInFolder MessageInFolder[]

  @@map("folders")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @map("user_id")
  title      String
  shortTitle String   @map("short_title")
  body       String
  position   Int
  timesUsed  Int      @map("times_used")
  isActive   Boolean  @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")

  appUser          AppUser?          @relation(fields: [userId], references: [userId])
  messagesInFolder MessageInFolder[]

  @@map("messages")
}

model MessageInFolder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @map("message_id") @db.ObjectId
  folderId  String   @map("folder_id") @db.ObjectId
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  message Message? @relation(fields: [messageId], references: [id])
  folder  Folder?  @relation(fields: [folderId], references: [id])

  @@unique([messageId, folderId])
  @@map("message_in_folder")
}

model MessageSent {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  sentAt      DateTime? @default(now()) @map("sent_at")
  messageId   String    @map("message_id")
  phoneCallId String    @map("phone_call_id") @db.ObjectId
  isActive    Boolean   @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")

  phoneCall PhoneCall? @relation(fields: [phoneCallId], references: [id])

  @@map("messages_sent")
}

model Settings {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  key        String
  value      String
  userId     String   @map("user_id")
  enabled    Boolean
  modifiedAt DateTime @default(now()) @map("modified_at")
  appUser    AppUser? @relation(fields: [appUserId], references: [id])
  appUserId  String?  @map("app_user_id") @db.ObjectId

  @@unique([key, userId])
  @@map("settings")
}

model PhoneCall {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  number        String
  startDate     DateTime? @default(now()) @map("start_date")
  endDate       DateTime? @default(now()) @map("end_date")
  actualEndDate DateTime? @default(now()) @map("actual_end_date")
  type          String
  isAnswered    Boolean   @map("is_answered")
  userId        String    @map("user_id")
  isActive      Boolean   @map("is_active")
  contactName   String    @map("contact_name")
  createdAt     DateTime  @default(now()) @map("created_at")

  messagesSent MessageSent[]

  @@map("phone_calls")
}
